TrajectoryPlannerROS:
  #Set the acceleration limits of the robot
  acc_lim_theta: 2.5
  acc_lim_x: 2.5
  acc_lim_y: 0.0

  #Set the velocity limits of the robot
  max_vel_x: 0.5
  min_vel_x: 0.1
  max_rotational_vel: 1
  min_in_place_rotational_vel: 0.6   #机器人实际最小旋转速度0.6

  #The velocity the robot will command when trying to escape from a stuck situation
  escape_vel: 0
  
  #For this example, we'll use a holonomic robot
  holonomic_robot: false

  #Since we're using a holonomic robot, we'll set the set of y velocities it will sample
  #y_vels: [-0.3, -0.1, 0.1, -0.3]

  #Set the tolerance on achieving a goal
  xy_goal_tolerance: 0.15
  yaw_goal_tolerance: 0.15 

  #We'll configure how long and with what granularity we'll forward simulate trajectories
  sim_time: 1.0
  sim_granularity: 0.025
  vx_samples: 6
  vtheta_samples: 20

  #Parameters for scoring trajectories

  #How far to look ahead in meters when scoring different in-place-rotation trajectories, default 0.325
  heading_lookahead: 0.325

  #We'll use the Dynamic Window Approach to control instead of Trajectory Rollout for this example
  dwa: false

  #How far the robot must travel before oscillation flags are reset, default 0.05
  oscillation_reset_dist: 0.1

  #Eat up the plan as the robot moves along it
  prune_plan: true

  meter_scoring: true
  pdist_scale: 2.5 #0.5
  path_distance_bias: 0.5
  gdist_scale: 0.5 #1.0
  goal_distance_bias: 1.0
  occdist_scale: 3.5 #0~5
